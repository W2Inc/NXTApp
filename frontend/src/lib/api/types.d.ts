/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cursus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all comments */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The updated feature */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CursusDO"][];
                        "application/json": components["schemas"]["CursusDO"][];
                        "text/json": components["schemas"]["CursusDO"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorResponseDto"];
                        "application/json": components["schemas"]["ErrorResponseDto"];
                        "text/json": components["schemas"]["ErrorResponseDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorResponseDto"];
                        "application/json": components["schemas"]["ErrorResponseDto"];
                        "text/json": components["schemas"]["ErrorResponseDto"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CursusPostRequestDto"];
                    "text/json": components["schemas"]["CursusPostRequestDto"];
                    "application/*+json": components["schemas"]["CursusPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cursus/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CursusPatchRequestDto"];
                    "text/json": components["schemas"]["CursusPatchRequestDto"];
                    "application/*+json": components["schemas"]["CursusPatchRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/cursus/{id}/path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the track data for a specific cursus */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/spotlights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all events */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEvent"][];
                        "application/json": components["schemas"]["SpotlightEvent"][];
                        "text/json": components["schemas"]["SpotlightEvent"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SpotlightPostRequestDTO"];
                    "text/json": components["schemas"]["SpotlightPostRequestDTO"];
                    "application/*+json": components["schemas"]["SpotlightPostRequestDTO"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEvent"];
                        "application/json": components["schemas"]["SpotlightEvent"];
                        "text/json": components["schemas"]["SpotlightEvent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEvent"];
                        "application/json": components["schemas"]["SpotlightEvent"];
                        "text/json": components["schemas"]["SpotlightEvent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a specific event */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEvent"];
                        "application/json": components["schemas"]["SpotlightEvent"];
                        "text/json": components["schemas"]["SpotlightEvent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Patch a specific event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SpotlightPatchRequestDTO"];
                    "text/json": components["schemas"]["SpotlightPatchRequestDTO"];
                    "application/*+json": components["schemas"]["SpotlightPatchRequestDTO"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEvent"];
                        "application/json": components["schemas"]["SpotlightEvent"];
                        "text/json": components["schemas"]["SpotlightEvent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description An Internal server error has occurred */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all features */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                    OrderBy?: string;
                    Order?: components["schemas"]["Order"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FeatureDO"];
                        "application/json": components["schemas"]["FeatureDO"];
                        "text/json": components["schemas"]["FeatureDO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new feature. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The DTO to post with. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FeaturePostRequestDTO"];
                    "text/json": components["schemas"]["FeaturePostRequestDTO"];
                    "application/*+json": components["schemas"]["FeaturePostRequestDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FeatureDO"];
                        "application/json": components["schemas"]["FeatureDO"];
                        "text/json": components["schemas"]["FeatureDO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Feature by that name exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific feature */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The feature ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FeatureDO"];
                        "application/json": components["schemas"]["FeatureDO"];
                        "text/json": components["schemas"]["FeatureDO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Feature by that name exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a feature. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The feature to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FeatureDO"];
                        "application/json": components["schemas"]["FeatureDO"];
                        "text/json": components["schemas"]["FeatureDO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Updates a new feature. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The feature to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description The DTO to post with. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FeaturePatchRequestDTO"];
                    "text/json": components["schemas"]["FeaturePatchRequestDTO"];
                    "application/*+json": components["schemas"]["FeaturePatchRequestDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FeatureDO"];
                        "application/json": components["schemas"]["FeatureDO"];
                        "text/json": components["schemas"]["FeatureDO"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"][];
                        "application/json": components["schemas"]["Project"][];
                        "text/json": components["schemas"]["Project"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ProjectPostRequestDto"];
                    "text/json": components["schemas"]["ProjectPostRequestDto"];
                    "application/*+json": components["schemas"]["ProjectPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BaseResponseDto"];
                        "application/json": components["schemas"]["BaseResponseDto"];
                        "text/json": components["schemas"]["BaseResponseDto"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BaseResponseDto"];
                        "application/json": components["schemas"]["BaseResponseDto"];
                        "text/json": components["schemas"]["BaseResponseDto"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BaseResponseDto"];
                        "application/json": components["schemas"]["BaseResponseDto"];
                        "text/json": components["schemas"]["BaseResponseDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["User"][];
                        "application/json": components["schemas"]["User"][];
                        "text/json": components["schemas"]["User"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{id}/rubrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Rubric"][];
                        "application/json": components["schemas"]["Rubric"][];
                        "text/json": components["schemas"]["Rubric"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{id}/git": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Git"];
                        "application/json": components["schemas"]["Git"];
                        "text/json": components["schemas"]["Git"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Git"];
                        "application/json": components["schemas"]["Git"];
                        "text/json": components["schemas"]["Git"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                    OrderBy?: string;
                    Order?: components["schemas"]["Order"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Review"][];
                        "application/json": components["schemas"]["Review"][];
                        "text/json": components["schemas"]["Review"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReviewPostRequestDto"];
                    "text/json": components["schemas"]["ReviewPostRequestDto"];
                    "application/*+json": components["schemas"]["ReviewPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReviewPatchRequestDto"];
                    "text/json": components["schemas"]["ReviewPatchRequestDto"];
                    "application/*+json": components["schemas"]["ReviewPatchRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FeebdackPostRequestDto"];
                    "text/json": components["schemas"]["FeebdackPostRequestDto"];
                    "application/*+json": components["schemas"]["FeebdackPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Feedback"];
                        "application/json": components["schemas"]["Feedback"];
                        "text/json": components["schemas"]["Feedback"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CommentPostRequestDto"];
                    "text/json": components["schemas"]["CommentPostRequestDto"];
                    "application/*+json": components["schemas"]["CommentPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Feedback"];
                        "application/json": components["schemas"]["Feedback"];
                        "text/json": components["schemas"]["Feedback"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CommentPostRequestDto"];
                    "text/json": components["schemas"]["CommentPostRequestDto"];
                    "application/*+json": components["schemas"]["CommentPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Comment"][];
                        "application/json": components["schemas"]["Comment"][];
                        "text/json": components["schemas"]["Comment"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CommentPostRequestDto"];
                    "text/json": components["schemas"]["CommentPostRequestDto"];
                    "application/*+json": components["schemas"]["CommentPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Comment"];
                        "application/json": components["schemas"]["Comment"];
                        "text/json": components["schemas"]["Comment"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CommentPostRequestDto"];
                    "text/json": components["schemas"]["CommentPostRequestDto"];
                    "application/*+json": components["schemas"]["CommentPostRequestDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Comment"][];
                        "application/json": components["schemas"]["Comment"][];
                        "text/json": components["schemas"]["Comment"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Comment"];
                        "application/json": components["schemas"]["Comment"];
                        "text/json": components["schemas"]["Comment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    Page?: number;
                    Size?: number;
                    Query: string;
                };
                header?: never;
                path: {
                    category: components["schemas"]["Category"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown[] & (components["schemas"]["UserDO"][] | components["schemas"]["ProjectDO"][] | components["schemas"]["CursusDO"][] | components["schemas"]["LearningGoalDO"][]);
                        "application/json": unknown[] & (components["schemas"]["UserDO"][] | components["schemas"]["ProjectDO"][] | components["schemas"]["CursusDO"][] | components["schemas"]["LearningGoalDO"][]);
                        "text/json": unknown[] & (components["schemas"]["UserDO"][] | components["schemas"]["ProjectDO"][] | components["schemas"]["CursusDO"][] | components["schemas"]["LearningGoalDO"][]);
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the currently authenticated user. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserDO"];
                        "application/json": components["schemas"]["UserDO"];
                        "text/json": components["schemas"]["UserDO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/current/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current user's events */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEvent"][];
                        "application/json": components["schemas"]["SpotlightEvent"][];
                        "text/json": components["schemas"]["SpotlightEvent"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/current/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Dismiss a notification, making sure it is not shown again to the user. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The notifications id to dismiss. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpotlightEventActionDO"];
                        "application/json": components["schemas"]["SpotlightEventActionDO"];
                        "text/json": components["schemas"]["SpotlightEventActionDO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                    OrderBy?: string;
                    Order?: components["schemas"]["Order"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserDO"][];
                        "application/json": components["schemas"]["UserDO"][];
                        "text/json": components["schemas"]["UserDO"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The user to get */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserDO"][];
                        "application/json": components["schemas"]["UserDO"][];
                        "text/json": components["schemas"]["UserDO"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a user */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserPatchRequestDTO"];
                    "text/json": components["schemas"]["UserPatchRequestDTO"];
                    "application/*+json": components["schemas"]["UserPatchRequestDTO"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserDO"];
                        "application/json": components["schemas"]["UserDO"];
                        "text/json": components["schemas"]["UserDO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/users/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a user's details */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserDetailsPutRequestDTO"];
                    "text/json": components["schemas"]["UserDetailsPutRequestDTO"];
                    "application/*+json": components["schemas"]["UserDetailsPutRequestDTO"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserDO"];
                        "application/json": components["schemas"]["UserDO"];
                        "text/json": components["schemas"]["UserDO"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/user_cursus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the cursus instances of a user.
         * @description Gets you all the instances of a user's cursus. Essentially "which cursi am I subscribed to ?"
         */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    /** @description The user id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserCursusDO"][];
                        "application/json": components["schemas"]["UserCursusDO"][];
                        "text/json": components["schemas"]["UserCursusDO"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/user_goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the goal instances of a user.
         * @description Gets you all the instances of a user's cursus. Essentially "which cursi am I subscribed to ?"
         */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    /** @description The user id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserGoalDO"][];
                        "application/json": components["schemas"]["UserGoalDO"][];
                        "text/json": components["schemas"]["UserGoalDO"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/user_projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the goal instances of a user.
         * @description Gets you all the instances of a user's cursus. Essentially "which cursi am I subscribed to ?"
         */
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    Size?: number;
                };
                header?: never;
                path: {
                    /** @description The user id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserProjectDO"][];
                        "application/json": components["schemas"]["UserProjectDO"][];
                        "text/json": components["schemas"]["UserProjectDO"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponseDto: {
            Message?: string | null;
            Success?: boolean;
        };
        /** @enum {string} */
        Category: "User" | "Project" | "Cursus" | "LearningGoal";
        Comment: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            markdown?: string | null;
            /** Format: uuid */
            user_id?: string;
            user?: components["schemas"]["User"];
            /** Format: uuid */
            feedback_id?: string;
            feedback?: components["schemas"]["Feedback"];
        };
        CommentPostRequestDto: {
            markdown: string;
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            feedback_id?: string;
        };
        Cursus: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name: string;
            description?: string | null;
            markdown: string;
            slug: string;
            public: boolean;
            enabled: boolean;
            kind?: components["schemas"]["CursusKind"];
            /** Format: uuid */
            creator_id?: string;
            creator?: components["schemas"]["User"];
        };
        CursusDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            description?: string | null;
            markdown?: string | null;
            slug?: string | null;
            public?: boolean;
            enabled?: boolean;
            kind?: components["schemas"]["CursusKind"];
            creator?: components["schemas"]["SimpleUserDO"];
        };
        /** @enum {string} */
        CursusKind: "Dynamic" | "Fixed";
        CursusPatchRequestDto: {
            name?: string | null;
            description?: string | null;
            markdown?: string | null;
            public?: boolean | null;
            enabled?: boolean | null;
        };
        CursusPostRequestDto: {
            name: string;
            description: string;
            markdown: string;
            public: boolean;
            enabled: boolean;
            kind: components["schemas"]["CursusKind"];
        };
        Details: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uuid */
            user_id?: string;
            user?: components["schemas"]["User"];
            email?: string | null;
            bio?: string | null;
            first_name?: string | null;
            last_name?: string | null;
            github_url?: string | null;
            linkedin_url?: string | null;
            twitter_url?: string | null;
            website_url?: string | null;
        };
        ErrorResponseDto: {
            Message?: string | null;
            Success?: boolean;
        };
        FeatureDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            markdown?: string | null;
        };
        FeaturePatchRequestDTO: {
            name?: string | null;
            markdown?: string | null;
            public?: boolean | null;
        };
        FeaturePostRequestDTO: {
            name: string;
            markdown: string;
            public: boolean;
        };
        FeebdackPostRequestDto: {
            /** Format: uuid */
            review_id: string;
        };
        Feedback: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uuid */
            review_id?: string;
            review?: components["schemas"]["Review"];
            comments?: components["schemas"]["Comment"][] | null;
        };
        Git: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uri */
            git_url: string;
            git_branch: string;
            git_commit?: string | null;
        };
        GitDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            git_url?: string | null;
            git_branch?: string | null;
            git_commit?: string | null;
        };
        GitInfoRequestDto: {
            /** Format: uri */
            git_url: string;
            git_branch?: string | null;
            git_commit?: string | null;
        };
        LearningGoal: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            slug?: string | null;
            markdown?: string | null;
            description?: string | null;
            /** Format: uuid */
            creator_id?: string;
            creator?: components["schemas"]["User"];
            projects?: components["schemas"]["Project"][] | null;
            user_goals?: components["schemas"]["UserGoal"][] | null;
        };
        LearningGoalDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            slug?: string | null;
            markdown?: string | null;
            description?: string | null;
            creator?: components["schemas"]["SimpleUserDO"];
        };
        Member: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            state?: components["schemas"]["MemberInviteState"];
            /** Format: uuid */
            user_id?: string;
            user?: components["schemas"]["User"];
            /** Format: uuid */
            user_goal_id?: string | null;
            user_goal?: components["schemas"]["UserGoal"];
            /** Format: uuid */
            user_project_id?: string;
            user_project?: components["schemas"]["UserProject"];
        };
        MemberDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            state?: components["schemas"]["MemberInviteState"];
            user?: components["schemas"]["SimpleUserDO"];
            /** Format: uuid */
            user_goal_id?: string | null;
            /** Format: uuid */
            user_project_id?: string;
        };
        /** @enum {string} */
        MemberInviteState: "Pending" | "Accepted";
        /** @enum {string} */
        Order: "Ascending" | "Descending";
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        Project: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            description?: string | null;
            markdown?: string | null;
            slug?: string | null;
            thumbnail_url?: string | null;
            /** @default false */
            public: boolean;
            /** @default false */
            enabled: boolean;
            /**
             * Format: int32
             * @default 3
             */
            max_members: number;
            /** Format: uuid */
            git_info_id?: string;
            git_info?: components["schemas"]["Git"];
            /** Format: uuid */
            creator_id?: string;
            creator?: components["schemas"]["User"];
            tags?: string[] | null;
            rubrics?: components["schemas"]["Rubric"][] | null;
            goals?: components["schemas"]["LearningGoal"][] | null;
            user_projects?: components["schemas"]["UserProject"][] | null;
        };
        ProjectDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            markdown?: string | null;
            slug?: string | null;
            thumbnail_url?: string | null;
            public?: boolean;
            enabled?: boolean;
            /** Format: int32 */
            max_members?: number;
            git_info?: components["schemas"]["GitDO"];
            creator?: components["schemas"]["SimpleUserDO"];
            tags?: string[] | null;
        };
        ProjectPostRequestDto: {
            name: string;
            description: string;
            markdown: string;
            /** Format: int32 */
            max_members: number;
            /** Format: uri */
            thumbnail_url: string;
            public: boolean;
            enabled: boolean;
            git_info?: components["schemas"]["GitInfoRequestDto"];
        };
        Review: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            kind: components["schemas"]["ReviewKind"];
            state?: components["schemas"]["ReviewState"];
            validated?: boolean;
            /** Format: uuid */
            reviewer_id?: string | null;
            reviewer?: components["schemas"]["User"];
            /** Format: uuid */
            rubric_id?: string | null;
            rubric?: components["schemas"]["Rubric"];
            /** Format: uuid */
            feedback_id?: string | null;
            feedback?: components["schemas"]["Feedback"];
            /** Format: uuid */
            user_project_id?: string | null;
            user_project?: components["schemas"]["UserProject"];
        };
        /** @enum {string} */
        ReviewKind: "Self" | "Peer" | "Async" | "Auto";
        ReviewPatchRequestDto: {
            state?: components["schemas"]["ReviewState"];
            /** Format: uuid */
            feedback_id?: string | null;
            /** Format: uuid */
            reviewer_id?: string | null;
            validated?: boolean | null;
        };
        ReviewPostRequestDto: {
            kind: components["schemas"]["ReviewKind"];
            /** Format: uuid */
            rubric_id: string;
            /** Format: uuid */
            user_project_id: string;
            /** Format: uuid */
            reviewer_id: string;
        };
        /** @enum {string} */
        ReviewState: "Pending" | "InProgress" | "Finished";
        Rubric: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            markdown?: string | null;
            public?: boolean;
            enabled?: boolean;
            /** Format: uuid */
            project_id?: string;
            project?: components["schemas"]["Project"];
            /** Format: uuid */
            creator_id?: string;
            creator?: components["schemas"]["User"];
            /** Format: uuid */
            git_info_id?: string;
            git_info?: components["schemas"]["Git"];
        };
        RubricDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            markdown?: string | null;
            public?: boolean;
            enabled?: boolean;
            project?: components["schemas"]["ProjectDO"];
            creator?: components["schemas"]["UserDO"];
            git_info?: components["schemas"]["GitDO"];
        };
        SimpleUserDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            login?: string | null;
            display_name?: string | null;
            avatar_url?: string | null;
            /** Format: uuid */
            details_id?: string | null;
        };
        SpotlightEvent: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            title?: string | null;
            description?: string | null;
            action_text?: string | null;
            /** Format: uri */
            href?: string | null;
            /** Format: uri */
            background_url?: string | null;
        };
        SpotlightEventActionDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uuid */
            user_id?: string;
            /** Format: uuid */
            notification_id?: string;
            is_dismissed?: boolean;
        };
        SpotlightPatchRequestDTO: {
            title?: string | null;
            description?: string | null;
            href_text?: string | null;
            /** Format: uri */
            href?: string | null;
            /** Format: uri */
            background_url?: string | null;
        };
        SpotlightPostRequestDTO: {
            title: string;
            description: string;
            href_text: string;
            /** Format: uri */
            href: string;
            /** Format: uri */
            background_url: string;
        };
        /** @enum {string} */
        TaskState: "Inactive" | "Active" | "Awaiting" | "Completed";
        User: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            login?: string | null;
            display_name?: string | null;
            /** Format: uri */
            avatar_url?: string | null;
            details?: components["schemas"]["Details"];
        };
        UserCursus: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            state?: components["schemas"]["TaskState"];
            /** Format: uuid */
            user_id?: string;
            user?: components["schemas"]["User"];
            /** Format: uuid */
            cursus_id?: string;
            cursus?: components["schemas"]["Cursus"];
        };
        UserCursusDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            state?: components["schemas"]["TaskState"];
            /** Format: uuid */
            user_id?: string;
            cursus?: components["schemas"]["CursusDO"];
        };
        UserDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            login?: string | null;
            display_name?: string | null;
            avatar_url?: string | null;
            details?: components["schemas"]["UserDetailsDO"];
        };
        UserDetailsDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            email?: string | null;
            bio?: string | null;
            first_name?: string | null;
            last_name?: string | null;
            github_url?: string | null;
            linkedin_url?: string | null;
            twitter_url?: string | null;
            website_url?: string | null;
        };
        UserDetailsPutRequestDTO: {
            /** Format: email */
            email?: string | null;
            bio?: string | null;
            first_name?: string | null;
            last_name?: string | null;
            /** Format: uri */
            github_url?: string | null;
            /** Format: uri */
            linkedin_url?: string | null;
            /** Format: uri */
            twitter_url?: string | null;
            /** Format: uri */
            website_url?: string | null;
        };
        UserGoal: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uuid */
            user_id?: string;
            user?: components["schemas"]["User"];
            /** Format: uuid */
            goal_id?: string;
            goal?: components["schemas"]["LearningGoal"];
            /** Format: uuid */
            user_cursus_id?: string | null;
            user_cursus?: components["schemas"]["UserCursus"];
            members?: components["schemas"]["Member"][] | null;
        };
        UserGoalDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            user?: components["schemas"]["UserDO"];
            /** Format: uuid */
            goal_id?: string;
            /** Format: uuid */
            user_cursus_id?: string | null;
            members?: components["schemas"]["MemberDO"][] | null;
        };
        UserPatchRequestDTO: {
            display_name?: string | null;
            /** Format: uri */
            avatar_url?: string | null;
        };
        UserProject: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            state?: components["schemas"]["TaskState"];
            /** Format: uuid */
            project_id?: string;
            project?: components["schemas"]["Project"];
            /** Format: uuid */
            git_info_id?: string;
            git_info?: components["schemas"]["Git"];
            /** Format: uuid */
            rubric_id?: string;
            rubric?: components["schemas"]["Rubric"];
            members?: components["schemas"]["Member"][] | null;
        };
        UserProjectDO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            state?: components["schemas"]["TaskState"];
            project?: components["schemas"]["ProjectDO"];
            git_info?: components["schemas"]["GitDO"];
            rubric?: components["schemas"]["RubricDO"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
